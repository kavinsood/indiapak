---
description: 
globs: app/**/*.ts,app/**/*.tsx,components/**/*.ts,components/**/*.tsx,lib/**/*.ts,utils/**/*.ts,middleware.ts
alwaysApply: false
---
### I. Project Structure & Organization (Next.js App Router)

1.  File Naming & Organization:
       Route directories: kebab-case (e.g., `app/assistant-config/route.ts`).
       Component files: PascalCase (e.g., `components/AssistantPanel.tsx`).
       Shadcn UI components: `components/ui/`.
       Reusable general components: `components/`.
       Colocate files with their usage context unless reusable app-wide.
2.  App Router Conventions (`app/`):
       `layout.tsx`: Shared UI across multiple pages/segments.
       `page.tsx`: Unique UI content for a route segment.
       `loading.tsx`: Loading UI for a route segment using Suspense.
       `error.tsx`: Error UI for a route segment, must be a Client Component.
       `not-found.tsx`: UI for 404 errors.
       `route.ts`: For API endpoints within the App Router.

### II. API Routes & Data Handling (Next.js)

1.  API Route Structure (Example):
       Use Zod for request/response validation and type inference.
       Handle authentication (using better-auth).
       Use a `withError` middleware/wrapper for consistent error handling.
    ```typescript
    // Example: app/api/some-route/route.ts
    import { z } from "zod";
    import { NextResponse } from "next/server";
    // import { auth } from "@/app/api/auth/[...nextauth]/auth"; // Or your auth solution
    // import { withError } from "@/utils/middleware";

    const requestBodySchema = z.object({ name: z.string() });
    export type RequestBodyType = z.infer<typeof requestBodySchema>;

    // async function processRequest(body: RequestBodyType, { userId }: { userId: string }) {
    //   // Database update logic
    // }

    // export const POST = withError(async (request: Request) => {
    //   // const session = await auth();
    //   // if (!session?.user.id) return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    //   const session = { user: { id: "mock-user-id" } }; // Placeholder

    //   const json = await request.json();
    //   const parseResult = requestBodySchema.safeParse(json);
    //   if (!parseResult.success) {
    //     return NextResponse.json({ error: "Invalid input", issues: parseResult.error.issues }, { status: 400 });
    //   }
    //   // const result = await processRequest(parseResult.data, { userId: session.user.id });
    //   // return NextResponse.json(result);
    //   return NextResponse.json({ message: "Success", data: parseResult.data });
    // });
    ```
2.  Data Fetching:
       Client-side (CSR) with SWR/React Query: For data that changes frequently or per user interaction.
        ```typescript
        // Example with SWR
        // import useSWR from "swr";
        // const fetcher = (url: string) => fetch(url).then(res => res.json());
        // const { data, error, isLoading } = useSWR<{ id: string }>("/api/user", fetcher);
        ```
       Server-side (RSC) with Server Components: Fetch data directly in async Server Components. Use `fetch` with caching options.
        ```typescript
        // Example in a Server Component
        // async function fetchUserData(userId: string) {
        //   const res = await fetch(`https://api.example.com/users/${userId}`, {
        //     next: { revalidate: 3600 } // Revalidate every hour
        //   });
        //   if (!res.ok) throw new Error('Failed to fetch user data');
        //   return res.json();
        // }
        // export default async function UserPage({ params }: { params: { id: string } }) {
        //   const user = await fetchUserData(params.id);
        //   return <div>{user.name}</div>;
        // }
        ```
3.  Server Actions (for Mutations):
       Use Server Actions for form submissions and data mutations from Client Components.
       Include `'use server';` directive at the top of the file or function.
       Validate input (e.g., with Zod).
       Handle authentication/authorization.
       Use `revalidatePath` or `revalidateTag` to update cached data.
    ```typescript
    // 'use server';
    // import { revalidatePath } from "next/cache";
    // // import { auth } from "@/app/api/auth/[...nextauth]/auth"; // Or your auth solution
    // import { z } from "zod";

    // const updateProfileBody = z.object({ name: z.string().min(1) });

    // export async function updateProfile(unsafeData: unknown) {
    //   // const session = await auth();
    //   // if (!session?.user.id) return { error: "Unauthorized", success: false };
    //   const session = { user: { id: "mock-user-id" } }; // Placeholder

    //   const parseResult = updateProfileBody.safeParse(unsafeData);
    //   if (!parseResult.success) {
    //     return { error: "Invalid input", issues: parseResult.error.issues, success: false };
    //   }
    //   const { name } = parseResult.data;

    //   // Perform database update with name for session.user.id
    //   // await db.user.update({ where: { id: session.user.id }, data: { name } });

    //   revalidatePath("/dashboard"); // Or specific path affected
    //   return { success: true, message: "Profile updated" };
    // }
    ```

### III. Performance Optimization (Next.js)

1.  Caching:
       Cache static or infrequently changing assets/data using `fetch` options (`next: { revalidate: <seconds> }`) or Route Segment Config.
2.  CDN:
       Utilize a CDN (like Vercel's default or Cloudflare) for global asset delivery.
3.  Lazy Loading:
       Apply lazy loading for components and pages not immediately visible using `next/dynamic`.
4.  Image Optimization:
       Use `next/image` for automatic image optimization (resizing, format conversion, lazy loading).
5.  Parallel Fetching:
       In Server Components, initiate multiple data fetches in parallel where possible (e.g., `Promise.all([...])`).
       Reference: Official Next.js Documentation on Performance.