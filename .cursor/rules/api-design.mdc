---
description: 
globs: **/api/**,**/routes/**,**/*.api.ts,**/*.api.js,**/graphql/**
alwaysApply: false
---
description: Modern API design patterns, validation, error handling, and developer experience guidelines
globs: ["**/api/**", "**/routes/**", "**/*.api.{ts,js}", "**/graphql/**"]
alwaysApply: false

### REST API Design

1. **Resource Naming & URLs**:
   - Use nouns for resources: `/users`, `/posts`, `/comments`
   - Use kebab-case for multi-word resources: `/user-profiles`, `/blog-posts`
   - Nested resources for relationships: `/users/{id}/posts`, `/posts/{id}/comments`
   - Avoid deep nesting (max 2 levels): `/users/{id}/posts` not `/users/{id}/posts/{id}/comments`

2. **HTTP Methods & Status Codes**:
   ```typescript
   // ✅ Proper HTTP method usage
   GET    /users        // 200 - List users
   GET    /users/123    // 200 - Get user, 404 - Not found
   POST   /users        // 201 - Created, 400 - Bad request
   PUT    /users/123    // 200 - Updated, 404 - Not found
   DELETE /users/123    // 204 - No content, 404 - Not found
   ```

3. **Request/Response Patterns**:
   - Use consistent response structure:
   ```typescript
   // Success response
   { "data": { /* actual data */ }, "meta": { "page": 1, "limit": 10 } }
   
   // Error response
   { "error": { "code": "VALIDATION_ERROR", "message": "Invalid input", "details": [...] } }
   ```

### API Validation & Security

1. **Input Validation with Zod**:
   ```typescript
   import { z } from 'zod';
   
   const CreateUserSchema = z.object({
     email: z.string().email(),
     name: z.string().min(1).max(100),
     age: z.number().int().min(18).optional(),
   });
   
   export type CreateUserRequest = z.infer<typeof CreateUserSchema>;
   ```

2. **Authentication & Authorization**:
   - Use JWT tokens with proper expiration
   - Implement role-based access control (RBAC)
   - Validate permissions at the resource level
   - Use middleware for authentication checks

3. **Rate Limiting & Security**:
   - Implement rate limiting per user/IP
   - Use CORS properly for browser requests
   - Validate Content-Type headers
   - Sanitize all user inputs

### Error Handling Patterns

1. **Consistent Error Structure**:
   ```typescript
   interface APIError {
     code: string;           // Machine-readable error code
     message: string;        // Human-readable message
     details?: unknown[];    // Additional error details
     timestamp: string;      // ISO timestamp
     path: string;          // Request path that caused error
   }
   ```

2. **Error Categories**:
   - `400 Bad Request`: Client input errors, validation failures
   - `401 Unauthorized`: Authentication required
   - `403 Forbidden`: Valid auth but insufficient permissions
   - `404 Not Found`: Resource doesn't exist
   - `409 Conflict`: Resource state conflict
   - `429 Too Many Requests`: Rate limit exceeded
   - `500 Internal Server Error`: Unexpected server errors

### API Documentation & Developer Experience

1. **OpenAPI/Swagger Integration**:
   - Generate API documentation from code
   - Include request/response examples
   - Document error scenarios
   - Provide interactive API playground

2. **Type Safety**:
   ```typescript
   // ✅ Generate types from API schemas
   export type APIResponse<T> = {
     data: T;
     meta?: {
       pagination?: { page: number; limit: number; total: number; };
       cache?: { expires: string; };
     };
   };
   ```

### GraphQL Patterns (if applicable)

1. **Schema Design**:
   - Use descriptive field names and types
   - Implement proper pagination (Relay-style cursor pagination)
   - Use unions and interfaces for polymorphic data
   - Design for client needs, not database structure

2. **Resolver Patterns**:
   ```typescript
   // ✅ Efficient data loading with DataLoader
   const userLoader = new DataLoader(async (userIds: string[]) => {
     const users = await db.user.findMany({
       where: { id: { in: userIds } }
     });
     return userIds.map(id => users.find(user => user.id === id));
   });
   ```

### Performance & Caching

1. **Response Optimization**:
   - Implement HTTP caching headers (`Cache-Control`, `ETag`)
   - Use compression (gzip/brotli) for large responses
   - Support partial responses with field selection
   - Implement proper pagination for large datasets

2. **Database Optimization**:
   - Use database indexes for frequently queried fields
   - Implement connection pooling
   - Use read replicas for read-heavy operations
   - Consider database-level caching (Redis)

### API Versioning

1. **Versioning Strategy**:
   - Use URL versioning: `/api/v1/users`, `/api/v2/users`
   - Maintain backward compatibility for at least 2 versions
   - Provide clear migration guides between versions
   - Use deprecation headers for old endpoints

2. **Breaking Changes**:
   - Never make breaking changes to existing endpoints
   - Create new versions for significant changes
   - Provide clear deprecation timeline
   - Use feature flags for gradual rollouts
